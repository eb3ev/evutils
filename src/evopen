#!/bin/sh
#
#= Evutils - Evopen
#
# Open files using their respective programs set in configuration file.
#
#
#== Synopsis
#
# evopen [options]
# evopen [options] --dir /dir/path ...
# evopen [options] /dir1/path:/dir2/path
# evopen [options] -- /dir/path ...
# evopen [options] /path/to/file
# evopen [options] -- /path/to/file
#
#
#== Options
#
# -f /path/to/file, --file /path/to/file
#    The file to open. If unset, search for files using evmenu in the set --dir 
#    or current working directory. If a path to directory is used then then this
#    is treated as a file that is will be opened. To open directories must use
#    --file or -f flag.
#
# -d /dir/path, --dir /dir/path
#    The directories to search for files if --file is unset. To search for multiple
#    directories, separate directory paths with :, e.g. /dir1/path:/dir2/path, or
#    pass multiple --dir.
# 
# --no-cache
#    Don't store recently opened file in a cache file -- $EVOPEN_HISTFILE.
#
# -h, --use-history
#    If --file is unset or --dir is unset, pass to search through recently opened
#    files from evopen.
#
# -s, --swallow
#    Use a window swallower to swallow the window it the program from the terminal
#    it was invoked from. devour (https://github.com/salman-abedin/devour) is the
#    window swallower that is used.
#
# -t, --new-term
#    Run evterm or evfm in a new terminal using evterm. This option will be enabled
#    by default if not run from an interactive shell. This option is ignored
#    if not in a graphical environment.
# 
# -r filter, --filter filter
#    Filter search. To use multiple filters, separate filters using :, e.g. --filter TXT:DOC.
#    Filters:
#    TXT = Whitelists plain-text files
#    DOC = Whitelists document files
#    IMG = Whitelists image files
#    VID = Whitelists video files
#    AUD = Whitelists audio files
#    ZIP = Whitelists archive files
# 
# -p prompt, --prompt prompt
#    Use a different prompt for evsearch. Default is "Open".
#
# --gui-menu
#    Attempt to use the --gui option for evmenu. If not in a graphical environment,
#    terminal menu is used.
#
# --term-menu
#    Attempt to use the --term option for evmenu.
#
# -o options, --opts options
#    Additional options to pass to the executed program. This will require you to
#    know the program that will be used.
#
# n, --no-fork
#    Applications are forked by default. Pass to disable.
#
# --dry-run
#    Print the computed command instead of running it.



. "$EVUTILS_HOME/lib/log"
. "$EVUTILS_HOME/lib/list"
. "$EVUTILS_HOME/lib/program"
. "$EVUTILS_HOME/lib/file"
. "$EVUTILS_HOME/lib/cache"
. "$EVUTILS_HOME/lib/config"

_file=""
_dirs=""
_cache=0
_use_history=1
_swallow=1
_filters=""
_prompt="Open"
_open_new_term=1
_program_opts=""
_fork=0
_dry_run=1

_evedit_opts=""
_evfm_opts=""
_evmenu_opts=""
_program_cmd=""

_win_swallower="devour"

# Search for files to open.
# @returns {path} Path to file.
#
_search_dirs() {
    evsearch_opts="${_evmenu_opts} --fuzzy --hidden --type FILE:DIR --prompt '${_prompt}'"
    if [ "$_filters" ]; then
        evsearch_opts="${evsearch_opts} --filter '${_filters}'"
    fi
    IFS=:
    eval evsearch "$evsearch_opts" -- $_dirs
    unset IFS
}

# Search from recently opened files to open.
# @returns {path} Path to file.
#
_search_history() {
    eval evmenu "$_evmenu_opts" --fuzzy --prompt "'$_prompt'" < "$EVOPEN_HISTFILE"
}

# Get the file to open from searches.
#
_set_file() {
    selection=""

    if ! { [ -t 0 ] || [ -p /dev/stdin ]; }; then
        _evmenu_opts="${_evmenu_opts} --gui"
    elif ! echo "$_evmenu_opts" | grep -Fq -e "--gui"; then
        _evmenu_opts="${_evmenu_opts} --term"
    fi

    if [ "$_use_history" -eq 0 ]; then
        if ! [ -e "$EVOPEN_HISTFILE" ]; then
            create_cache_dir
            touch "$EVOPEN_HISTFILE"
        fi

        if [ "$(wc -w < "$EVOPEN_HISTFILE" 2>/dev/null)" -eq 0 ]; then
            log_status "Open history empty. Exiting..."
            exit
        fi

        selection=$(_search_history) 
        if [ "$selection" ]; then
            if grep -Fqx -e "$selection" -- "$EVOPEN_HISTFILE"; then
                if ! [ -e "$selection" ]; then
                    list_rm --file "$EVOPEN_HISTFILE" -- "$selection"
                    log_error "${selection} no longer exists. Exiting..."
                    exit 1
                fi
            fi
        fi
    else
        selection=$(_search_dirs) 
    fi

    if ! [ "$selection" ]; then
        exit
    fi

    _file=$(readlink -f "$selection")

    if ! [ -e "$selection" ]; then
        log_error "Invalid file -- ${_file}. Exiting..."
        exit 1
    fi
}

# Set the program command to run.
#
_set_program_cmd() {
    program=""

    if is_directory "$_file"; then
        program=TERM_FM
    elif is_plain_text_file "$_file"; then
        program=TERM_EDITOR
    elif is_video_file "$_file"; then
        if ! [ "$EVUTILS_VIDEO_PLAYER" ]; then
            log_error "video_player unset in configuration file. Exiting..."
            exit 1
        elif is_not_installed "$EVUTILS_VIDEO_PLAYER"; then
            log_error "${EVUTILS_VIDEO_PLAYER} is not installed. Exiting..."
            exit 1
        else
            program=$EVUTILS_VIDEO_PLAYER
        fi
    elif is_audio_file "$_file"; then
        if ! [ "$EVUTILS_AUDIO_PLAYER" ]; then
            log_error "audio_player unset in configuration file. Exiting..."
            exit 1
        elif is_not_installed "$EVUTILS_AUDIO_PLAYER"; then
            log_error "${EVUTILS_AUDIO_PLAYER} is not installed. Exiting..."
            exit 1
        else
            program=$EVUTILS_AUDIO_PLAYER
        fi
    elif is_image_file "$_file"; then
        if ! [ "$EVUTILS_IMAGE_VIEWER" ]; then
            log_error "image_viewer unset in configuration file. Exiting..."
            exit 1
        elif is_not_installed "$EVUTILS_IMAGE_VIEWER"; then
            log_error "${EVUTILS_IMAGE_VIEWER} is not installed. Exiting..."
            exit 1
        else
            program=$EVUTILS_IMAGE_VIEWER
        fi
    elif is_doc_file "$_file"; then
        if ! [ "$EVUTILS_READER" ]; then
            log_error "reader unset in configuration file. Exiting..."
            exit 1
        elif is_not_installed "$EVUTILS_READER"; then
            log_error "${EVUTILS_READER} is not installed. Exiting..."
            exit 1
        else
            program=$EVUTILS_READER
        fi
    fi

    case $program in
        TERM_EDITOR)
            _program_cmd="evedit ${_evedit_opts} -- '${_file}'"
            ;;
        TERM_FM)
            _program_cmd="evfm ${_evfm_opts} -- '${_file}'"
            ;;
        *)
            if [ "$_fork" -eq 0 ]; then
                _program_cmd="${program} ${_program_opts} '${_file}' &"
            else
                _program_cmd="${program} ${_program_opts} '${_file}'"
            fi
            ;;
    esac

    if [ "$_swallow" -eq 0 ]; then
        if [ -t 0 ] || [ -p /dev/stdin ]; then
            if is_installed "devour"; then
                case $program in
                    TERM_EDITOR|TERM_FM)
                        if [ "$_open_new_term" -eq 0 ]; then
                            _program_cmd="${_win_swallower} ${_program_cmd}"
                        # else
                        #     log_warning "Running application in terminal. Ignoring window swallowing..."
                        fi
                        ;;
                    *)
                        _program_cmd="${_win_swallower} ${_program_cmd}"
                esac
            else
                log_warning "Window swallower (${_win_swallower}) not installed. Ignoring..."
            fi
        else
            log_warning "Ignoring window swallowing -- no window to swallow. Skipping..."
        fi
    fi

}

# Run the program and the command to run.
#
_run() {
    if ! [ "$_file" ]; then
        _set_file
    fi

    _set_program_cmd

    if [ "$_dry_run" -eq 0 ]; then
        eval echo "$_program_cmd"
    else
        if [ "$_cache" -eq 0 ]; then
            _file=$(readlink -f "$_file")
            if [ -e "$EVOPEN_HISTFILE" ]; then
                move_to_top --file "$EVOPEN_HISTFILE" -- "$_file"
            else
                create_cache_dir
                echo "$_file" > "$EVOPEN_HISTFILE"
            fi
        fi
        eval "$_program_cmd"
    fi
}

main() {
    while [ "$1" ]; do
        case $1 in
            -f|--file)
                if [ -f "$2" ]; then
                    _file=$2
                elif [ -d "$2" ]; then
                    _file=$2
                else
                    log_warning "Invalid file ${2}. Ignoring..."
                fi
                shift
                ;;
            -d|--dir)
                IFS=:
                for dir in $2; do
                    unset IFS
                    if [ -d "$dir" ]; then
                        _dirs=$(list_cat "$_dirs" "$dir" ":")
                    else
                        log_warning "Invalid directory ${2}. Ignoring..."
                    fi
                done
                shift
                ;;
            --no-cache)
                _cache=1
                ;;
            -h|--use-history)
                _use_history=0
                ;;
            -s|--swallow)
                _swallow=0
                ;;
            -r|--filter)
                _filters=$2
                shift
                ;;
            -p|--prompt)
                _prompt=$2
                shift
                ;;
            -t|--new-term)
                _open_new_term=0
                _evedit_opts="${_evedit_opts} --new-term"
                _evfm_opts="${_evfm_opts} --new-term"
                ;;
            -o|--opts)
                _program_opts="'$2'"
                shift
                ;;
            --gui-menu)
                _evmenu_opts="${_evmenu_opts} --gui"
                ;;
            --term-menu)
                _evmenu_opts="${_evmenu_opts} --term"
                ;;
            --no-fork)
                _fork=1
                _evedit_opts="${_evedit_opts} --no-fork"
                _evfm_opts="${_evfm_opts} --no-fork"
                ;;
            --dry-run)
                _dry_run=0
                ;;
            --)
                shift
                break
                ;;
            -?*)
                log_warning "Unknown option ${1}. Ignoring..."
                ;;
            *)
                if [ -f "$1" ]; then
                    _file=$1
                else
                    IFS=:
                    for dir in $1; do
                        unset IFS
                        if [ -d "$dir" ]; then
                            _dirs=$(list_cat "$_dirs" "$dir" ":")
                        else
                            log_warning "Invalid file/directory ${dir}. Ignoring..."
                        fi
                    done
                fi
                ;;
        esac
        shift
    done

    while [ "$1" ]; do
        if [ -f "$1" ]; then
            _file=$1
        else
            IFS=:
            for dir in $1; do
                unset IFS
                if [ -d "$dir" ]; then
                    _dirs=$(list_cat "$_dirs" "$dir" ":")
                else
                    log_warning "Invalid file/directory ${dir}. Ignoring..."
                fi
            done
        fi
        shift
    done

    _run
}

main "$@"


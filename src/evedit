#!/bin/sh
#
#= Evutils - Evedit
#
# Edit files using terminal editors.
#
#
#== Synopsis
# 
# evedit [options]
# evedit [options] --dir /dir/path ...
# evedit [options] /dir1/path:/dir2/path
# evedit [options] -- /dir/path ...
# evedit [options] /path/to/file
# evedit [options] -- /path/to/file
#
#
#== Options
#
# -f /path/to/file , --file /path/to/file
#    The file to edit. If unset, search for files using evmenu in the set --dir 
#    or current working directory. If a path to directory is used then then this
#    is treated as a file that is will be opened in editor. To open directories
#    must use --file or -f flag.
#
# -d /dir/path, --dir /dir/path
#    The directories to search for files if --file is unset. To search for multiple
#    directories, separate directory paths with :, e.g. /dir1/path:/dir2/path, or
#    pass multiple --dir.
# 
# -r, --root
#    Run editor as a root user.
#
# -n, --no-filter
#    Don't use a filter when searching in evsearch. Defined plain-text evutils
#    are shown only by default.
#
# --no-cache
#    Don't store recently opened file in a cache file -- $EVEDIT_HISTFILE.
#
# -h, --use-history
#    If --file is unset or --dir is unset, pass to search through recently opened
#    files from evedit.
#
# -p prompt, --prompt prompt
#    Use a different prompt for evsearch. Default is "Edit".
#
# -e editor, --editor editor
#    The terminal editor to use. If unset, the term_editor set in configuration file is used.
#
# -t, --new-term
#    Open terminal editor in a new terminal using evterm. This option will be enabled
#    by default if not run from an interactive shell. This option is ignored
#    if not in a graphical environment.
#
# -o terminal-options, --term-opts terminal-options
#    Additional options to pass to the terminal used in evterm if --new-term
#    is set.
#
# --gui-menu
#    Attempt to use the --gui option for evmenu. If not in a graphical environment,
#    terminal menu is used.
#
# --term-menu
#    Attempt to use the --term option for evmenu.
#
# --no-fork
#    evterm is forked by default. Pass to disable.
#
# --dry-run
#    Print the computed command instead of running it.



. "$EVUTILS_HOME/lib/log"
. "$EVUTILS_HOME/lib/list"
. "$EVUTILS_HOME/lib/program"
. "$EVUTILS_HOME/lib/cache"
. "$EVUTILS_HOME/lib/config"

_file=""
_dirs=""
_require_root=1
_use_filter=0
_cache=0
_use_history=1
_prompt="Edit"
_editor=""
_open_new_term=1
_term_opts=""
_fork=0
_dry_run=1

_evmenu_opts=""
_editor_cmd=""

# Search for files to edit.
# @returns {path} Path to file.
#
_search_dirs() {
    evsearch_opts="${_evmenu_opts} --fuzzy --hidden --type FILE:DIR --prompt '${_prompt}'"
    if [ "$_use_filter" -eq 0 ]; then
        evsearch_opts="${evsearch_opts} --filter TXT"
    fi
    IFS=:
    eval evsearch "$evsearch_opts" -- $_dirs
    unset IFS
}

# Search from recently opened files to edit.
# @returns {path} Path to file.
#
_search_history() {
    eval evmenu "$_evmenu_opts" --fuzzy --prompt "$_prompt" < "$EVEDIT_HISTFILE"
}

# Get the file to edit from searches.
#
_set_file() {
    selection=""

    if ! { [ -t 0 ] || [ -p /dev/stdin ]; }; then
        _evmenu_opts="${_evmenu_opts} --gui"
    elif ! echo "$_evmenu_opts" | grep -Fq -- "--gui"; then
        _evmenu_opts="${_evmenu_opts} --term"
    fi

    if [ "$_use_history" -eq 0 ]; then
        if ! [ -e "$EVEDIT_HISTFILE" ]; then
            create_cache_dir
            touch "$EVEDIT_HISTFILE"
        fi

        if [ "$(wc -w < "$EVEDIT_HISTFILE" 2>/dev/null)" -eq 0 ]; then
            log_status "Edit history empty. Exiting..."
            exit
        fi

        selection=$(_search_history) 
        if [ "$selection" ]; then
            if grep -Fqx "$selection" -- "$EVEDIT_HISTFILE"; then
                if ! [ -e "$selection" ]; then
                    list_rm --file "$EVEDIT_HISTFILE" -- "$selection"
                    log_error "${selection} no longer exists. Exiting..."
                    exit 1
                fi
            fi
        fi
    else
        selection=$(_search_dirs) 
    fi

    if ! [ "$selection" ]; then
        exit
    fi

    _file=$(readlink -f "$selection")

    if ! [ -e "$selection" ]; then
        log_error "Invalid file -- ${_file}. Exiting..."
        exit 1
    fi
}

# Set the editor and the command to run.
#
_set_editor_cmd() {
    if ! [ "$_editor" ]; then
        if ! [ "$EVUTILS_TERM_EDITOR" ]; then
            log_error "term_editor unset in configuration file. Exiting..."
            exit 1
        elif is_not_installed "$EVUTILS_TERM_EDITOR"; then
            log_error "${EVUTILS_TERM_EDITOR} is not installed. Exiting..."
            exit 1
        else
            _editor=$EVUTILS_TERM_EDITOR
        fi
    fi

    if [ "$_require_root" -eq 0 ]; then
        if [ "$DISPLAY" ]; then
            if ! { [ -t 0 ] || [ -p /dev/stdin ]; }; then
                _editor="SUDO_ASKPASS=$(which evpass) SUDO_EDITOR='${_editor}' sudoedit"
            else
                _editor="SUDO_EDITOR='${_editor}' sudoedit"
            fi
        else
            _editor="SUDO_EDITOR='${_editor}' sudoedit"
        fi
    fi

    _editor_cmd="${_editor} '${_file}'"

    if ! { [ -t 0 ] || [ -p /dev/stdin ]; }; then
        _open_new_term=0
    fi

    if [ "$_open_new_term" -eq 0 ] && [ "$DISPLAY" ]; then
        if [ "$_fork" -eq 0 ]; then
            _editor_cmd="evterm -- '${_editor_cmd}'"
        else
            _editor_cmd="evterm --no-fork ${_term_opts} -- '${_editor_cmd}'"
        fi
    fi
}

# Run the editor.
#
_run() {
    if ! [ "$_file" ]; then
        _set_file
    fi

    _set_editor_cmd

    if [ "$_dry_run" -eq 0 ]; then
        eval echo "$_editor_cmd"
    else
        if [ "$_cache" -eq 0 ]; then
            _file=$(readlink -f "$_file")
            if [ -e "$EVEDIT_HISTFILE" ]; then
                move_to_top --file "$EVEDIT_HISTFILE" -- "$_file"
            else
                create_cache_dir
                echo "$_file" > "$EVEDIT_HISTFILE"
            fi
        fi
        eval "$_editor_cmd"
    fi
}

main() {
    while [ "$1" ]; do
        case $1 in
            -f|--file)
                if [ -f "$2" ]; then
                    _file=$2
                elif [ -d "$2" ]; then
                    _file=$2
                else
                    log_warning "Invalid file ${2}. Ignoring..."
                fi
                shift
                ;;
            -d|--dir)
                IFS=:
                for dir in $2; do
                    unset IFS
                    if [ -d "$dir" ]; then
                        _dirs=$(list_cat "$_dirs" "$dir" ":")
                    else
                        log_warning "Invalid directory ${dir}. Ignoring..."
                    fi
                done
                shift
                ;;
            -r|--root)
                _require_root=0
                ;;
            -n|--no-filter)
                _use_filter=1
                ;;
            --no-cache)
                _cache=1
                ;;
            -h|--use-history)
                _use_history=0
                ;;
            -p|--prompt)
                _prompt=$2
                shift
                ;;
            -e|--editor)
                if is_installed "$2"; then
                    _editor=$2
                else
                    log_warning "${2} not installed. Ignoring..."
                fi
                shift
                ;;
            -t|--new-term)
                _open_new_term=0
                ;;
            -o|--term-opts)
                _term_opts="--term-opts '$2'"
                shift
                ;;
            --gui-menu)
                _evmenu_opts="${_evmenu_opts} --gui"
                ;;
            --term-menu)
                _evmenu_opts="${_evmenu_opts} --term"
                ;;
            --no-fork)
                _fork=1
                ;;
            --dry-run)
                _dry_run=0
                ;;
            --)
                shift
                break
                ;;
            -?*)
                log_warning "Unknown option ${1}. Ignoring..."
                ;;
            *)
                if [ -f "$1" ]; then
                    _file=$1
                else
                    IFS=:
                    for dir in $1; do
                        unset IFS
                        if [ -d "$dir" ]; then
                            _dirs=$(list_cat "$_dirs" "$dir" ":")
                        else
                            log_warning "Invalid file/directory ${dir}. Ignoring..."
                        fi
                    done
                fi
                ;;
        esac
        shift
    done

    while [ "$1" ]; do
        if [ -f "$1" ]; then
            _file=$1
        else
            IFS=:
            for dir in $1; do
                unset IFS
                if [ -d "$dir" ]; then
                    _dirs=$(list_cat "$_dirs" "$dir" ":")
                else
                    log_warning "Invalid file/directory ${dir}. Ignoring..."
                fi
            done
        fi
        shift
    done

    _run
}

main "$@"

